{"version":3,"sources":["App.js","index.js"],"names":["App","useState","input","setInput","customMean","setCustomMean","customMeanInput","setCustomMeanInput","result","setResult","average","setAverage","calculate","set","nums","i","s","length","charAt","push","parseFloat","console","log","val","parseInput","sum","avg","n","numerator","className","rows","placeholder","value","onChange","e","target","onClick","Math","sqrt","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NAwIeA,MArIf,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAoCF,mBAAS,MAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAA8CJ,mBAAS,KAAvD,mBAAOK,EAAP,KAAwBC,EAAxB,KACA,EAA4BN,mBAAS,MAArC,mBAAOO,EAAP,KAAeC,EAAf,KACA,EAA8BR,mBAAS,MAAvC,mBAAOS,EAAP,KAAgBC,EAAhB,KAwCMC,EAAY,WAChB,GAAc,KAAVV,EAAJ,CAGA,IAAIW,EA1Ca,WAIjB,IAHA,IAAIC,EAAO,GACPC,EAAI,EACJC,EAAI,GACDD,GAAKb,EAAMe,QAEM,MAApBf,EAAMgB,OAAOH,IACO,MAApBb,EAAMgB,OAAOH,IACO,OAApBb,EAAMgB,OAAOH,IAEbC,GAAQd,EAAMgB,OAAOH,KACrBA,IACUb,EAAMe,QACdH,EAAKK,KAAKC,WAAWJ,MAGvBK,QAAQC,IAAIN,GACRA,EAAEC,OAAS,IACbH,EAAKK,KAAKC,WAAWJ,IACrBA,EAAI,IAGND,KAIJ,GAAwB,MAApBT,EAAyB,CAC3B,IAAIiB,EAAMH,WAAWd,GACjBiB,EACFlB,EAAckB,GAEdhB,EAAmB,iBAIvB,OAAOO,EAOGU,GACVH,QAAQC,IAAIT,GACZ,IACIY,EACAC,EAFAC,EAAId,EAAII,OAGZ,GAAmB,OAAfb,EAAqB,CACvBqB,EAAM,EACN,IAAK,IAAIV,EAAI,EAAGA,EAAIY,EAAGZ,IACrBU,GAAOZ,EAAIE,GAEbW,EAAMD,EAAME,OAEZD,EAAMtB,EAIR,IADA,IAAIwB,EAAY,EACPb,EAAI,EAAGA,EAAIY,EAAGZ,IAAK,CAE1Ba,IADWf,EAAIE,GAAKW,IAAQb,EAAIE,GAAKW,GAKvCjB,EADgBmB,EAAYD,GAE5BhB,EAAWe,KAIb,OACE,sBAAKG,UAAU,MAAf,UACE,sBAAMA,UAAU,QAAhB,mCAKA,sBAAMA,UAAU,iBAAhB,0CACA,0BACEC,KAAM,EACND,UAAU,YACVE,YAAY,8EACZC,MAAO9B,EACP+B,SAAU,SAACC,GACT/B,EAAS+B,EAAEC,OAAOH,UAGtB,sBAAKH,UAAU,aAAf,UACE,uBAAOA,UAAU,kBAAjB,iDAGA,uBACEA,UAAU,kBACVG,MAAO1B,EACP2B,SAAU,SAACC,GACT3B,EAAmB2B,EAAEC,OAAOH,aAKlC,wBACEH,UAAU,kBACVO,QAAS,WACPxB,KAHJ,wBASCJ,GAAUE,GACT,sBAAKmB,UAAU,UAAf,UACE,uBAAMA,UAAU,cAAhB,8BACmB,sBAAMA,UAAU,eAAhB,SAAgCrB,OAEnD,uBAAMqB,UAAU,cAAhB,qCAEE,sBAAMA,UAAU,eAAhB,SAAgCQ,KAAKC,KAAK9B,QAE5C,uBAAMqB,UAAU,cAAhB,oBACS,sBAAMA,UAAU,eAAhB,SAAgCnB,cC3HnD6B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.ce742a5d.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const [input, setInput] = useState(\"\");\n  const [customMean, setCustomMean] = useState(null);\n  const [customMeanInput, setCustomMeanInput] = useState(\" \");\n  const [result, setResult] = useState(null);\n  const [average, setAverage] = useState(null);\n\n  const parseInput = () => {\n    let nums = [];\n    let i = 0;\n    let s = \"\";\n    while (i <= input.length) {\n      if (\n        input.charAt(i) !== \",\" &&\n        input.charAt(i) !== \" \" &&\n        input.charAt(i) !== \"\\n\"\n      ) {\n        s = s + input.charAt(i);\n        i++;\n        if (i === input.length) {\n          nums.push(parseFloat(s));\n        }\n      } else {\n        console.log(s);\n        if (s.length > 0) {\n          nums.push(parseFloat(s));\n          s = \"\";\n        }\n\n        i++;\n      }\n    }\n\n    if (customMeanInput !== \" \") {\n      let val = parseFloat(customMeanInput);\n      if (val) {\n        setCustomMean(val);\n      } else {\n        setCustomMeanInput(\"Invalid Input\");\n      }\n    }\n\n    return nums;\n  };\n\n  const calculate = () => {\n    if (input === \"\") {\n      return;\n    }\n    let set = parseInput();\n    console.log(set);\n    let n = set.length;\n    let sum;\n    let avg;\n    if (customMean === null) {\n      sum = 0;\n      for (let i = 0; i < n; i++) {\n        sum += set[i];\n      }\n      avg = sum / n;\n    } else {\n      avg = customMean;\n    }\n\n    let numerator = 0;\n    for (let i = 0; i < n; i++) {\n      let val = (set[i] - avg) * (set[i] - avg);\n      numerator += val;\n    }\n\n    let newResult = numerator / n;\n    setResult(newResult);\n    setAverage(avg);\n\n    //Variance = (E(Xi - x)^2) / n - 1\n  };\n  return (\n    <div className=\"App\">\n      <span className=\"title\"\n        \n      >\n        STATISTICS CALCULATOR\n      </span>\n      <span className=\"inputAreaTitle\">Enter your data set below...</span>\n      <textarea\n        rows={4}\n        className=\"inputArea\"\n        placeholder=\"Seperate your elements with commas or spaces... Ex: 3, 4, 12, 29, 30.4, 20 \"\n        value={input}\n        onChange={(e) => {\n          setInput(e.target.value);\n        }}\n      />\n      <div className=\"customMean\">\n        <label className=\"customMeanLabel\">\n          Enter Custom Mean Value (Optional):\n        </label>\n        <input\n          className=\"customMeanInput\"\n          value={customMeanInput}\n          onChange={(e) => {\n            setCustomMeanInput(e.target.value);\n          }}\n        />\n      </div>\n\n      <button\n        className=\"calculateButton\"\n        onClick={() => {\n          calculate();\n        }}\n      >\n        Calculate!\n      </button>\n\n      {result && average && (\n        <div className=\"results\">\n          <span className=\"resultLabel\">\n            Variance (s^2) = <span className=\"resultNumber\">{result}</span>\n          </span>\n          <span className=\"resultLabel\">\n            Standard Deviation (s) =\n            <span className=\"resultNumber\">{Math.sqrt(result)}</span>\n          </span>\n          <span className=\"resultLabel\">\n            Mean = <span className=\"resultNumber\">{average}</span>\n          </span>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}